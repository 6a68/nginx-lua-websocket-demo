# TODO probably want >1 worker proc?
worker_processes  1;
error_log logs/error.log;
events {
    # TODO 1024 connections probably too low?
    worker_connections 1024;
}
http {
    # TODO 10m long enough? or is that 10 mb?
    lua_shared_dict stats 10m;
    server {
        # so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];
        # for example:
        # TODO do we want keepalives?
	      listen 8080 so_keepalive=on;
        location /stats {
          # TODO idea: we can safely incr. so incr by -1 when disconnecting.
          # TODO: we were getting nil because we need to init the value to 0.
          #      init in the right place.
          # TODO: how to ngx.say the difference here?
          content_by_lua '
            ngx.say(ngx.shared.stats:get("connections"))
          ';
        }
        location /s {
          lua_socket_log_errors off;
          lua_check_client_abort on;
          content_by_lua '
            ngx.shared.stats:set("connections", 0)
            local server = require "resty.websocket.server"
            local wb, err = server:new{
              timeout = 5000,
              max_payload_len = 65535
            }
            if not wb then
              ngx.log(ngx.ERR, "failed to new websocket: ", err)
              return ngx.exit(444)
            end
            while true do
              local data, typ, err = wb:recv_frame()
              if wb.fatal then
                ngx.log(ngx.ERR, "failed to receive frame: ", err)
                return ngx.exit(444)
              end
              if not data then
                local bytes, err = wb:send_ping()
                if not bytes then
                  ngx.log(ngx.ERR, "failed to send ping: ", err)
                  return ngx.exit(444)
                end
              elseif typ == "close" then
                ngx.shared.stats:incr("connections", -1)
                break
              elseif typ == "ping" then
                ngx.shared.stats:incr("connections", 1);
                local bytes, err = wb:send_pong()
                if not bytes then
                  ngx.log(ngx.ERR, "failed to send pong: ", err)
                  return ngx.exit(444)
                end
              elseif typ == "pong" then
                ngx.log(ngx.INFO, "client ponged")
              elseif typ == "text" then
                local bytes, err = wb:send_text(data)
                if not bytes then
                  ngx.log(ngx.ERR, "failed to send text: ", err)
                  return ngx.exit(444)
                end
              end
            end
            wb:send_close()
          ';
        }
    }
}
